variables:
  GIT_STRATEGY: clone

pages:
  only:
    - master
    - doctest
  before_script:
#    - echo "$SHELL"
#    - zsh
    - echo "$SHELL"
    - which conda
    - which python
    - conda env create -n rc_gl_doc_temp -f environment_rescomp.yml
    - conda activate rc_gl_doc_temp
    - which python
#    - echo "1"
##    - whoami
#    - source ~/anaconda3/etc/profile.d/conda.sh
##    - which conda
#    - conda activate rescomp_runner
##    - which python
##    - which pip
#    - python setup.py sdist bdist_wheel
#    - pip install .
  script:
    - echo "$SHELL"
#    - whoami
##    - source ~/anaconda3/etc/profile.d/conda.sh
##    - which conda
##    - conda activate rescomp_runner
##    - which python
##    - which pip
#    - cd doc
#    - make html
#    - cd ..
#    - rsync -r --remove-source-files --delete doc/_build/html/ public/
##    - mv doc/_build/html/ public/
##    - sphinx-build -b html docs/ public/
#  after_script:
##    - whoami
#    - source ~/anaconda3/etc/profile.d/conda.sh
##    - which conda
#    - conda activate rescomp_runner
##    - which python
##    - which pip
#    - yes | pip uninstall rescomp
#    - conda deactivate
#  artifacts:
#    paths:
#      - public



## To contribute improvements to CI/CD templates, please follow the Development guide at:
## https://docs.gitlab.com/ee/development/cicd/templates.html
## This specific template is located at:
## https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml
#
## Build a Docker image with CI/CD and push to the GitLab registry.
## Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
##
## This template uses one generic job with conditional builds
## for the default branch and all other (MR) branches.
#
#docker-build:
#  # Use the official docker image.
#  image: docker:latest
#  stage: build
#  services:
#    - docker:dind
#  before_script:
#    - docker info
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  # Default branch leaves tag empty (= latest tag)
#  # All other branches are tagged with the escaped branch name (commit ref slug)
#  script:
#    - |
#      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
#        tag=""
#        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
#      else
#        tag=":$CI_COMMIT_REF_SLUG"
#        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
#      fi
#    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
#    - docker push "$CI_REGISTRY_IMAGE${tag}"
#  # Run this job in a branch where a Dockerfile exists
##  rules:
##    - if: $CI_COMMIT_BRANCH
##      exists:
##        - Dockerfile




## To contribute improvements to CI/CD templates, please follow the Development guide at:
## https://docs.gitlab.com/ee/development/cicd/templates.html
## This specific template is located at:
## https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml
#
## Official language image. Look for the different tagged releases at:
## https://hub.docker.com/r/library/python/tags/
#image: python:latest
#
## Change pip's cache directory to be inside the project directory since we can
## only cache local items.
#variables:
#  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
#
## Pip's cache doesn't store the python packages
## https://pip.pypa.io/en/stable/reference/pip_install/#caching
##
## If you want to also cache the installed packages, you have to install
## them in a virtualenv and cache it as well.
#cache:
#  paths:
#    - .cache/pip
#    - venv/
#
#before_script:
#  - python -V  # Print out python version for debugging
#  - pip install virtualenv
#  - virtualenv venv
#  - source venv/bin/activate
#
#test:
#  script:
#    - python setup.py test
#    - pip install tox flake8  # you can also use tox
#    - tox -e py36,flake8
#
#run:
#  script:
#    - python setup.py bdist_wheel
#    # an alternative approach is to install and run:
#    - pip install dist/*
#    # run the command here
#  artifacts:
#    paths:
#      - dist/*.whl
#
#pages:
#  script:
#    - pip install sphinx sphinx-rtd-theme
#    - cd doc ; make html
#    - mv build/html/ ../public/
#  artifacts:
#    paths:
#      - public
##  rules:
##    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


